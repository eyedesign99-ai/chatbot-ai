import requests
import openai
import json
import os
from openpyxl import Workbook, load_workbook
from datetime import datetime
import uuid


# C·∫•u h√¨nh API Key c·ªßa OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")
client = openai.OpenAI(api_key=openai.api_key)


# --- T·∫£i d·ªØ li·ªáu t·ª´ price.json ---
price_path = os.path.join(os.path.dirname(__file__), "information", "price.json")
try:
    with open(price_path, "r", encoding="utf-8") as f:
        ty_le_khung_data = json.load(f)
    print(f"‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu t·ª´: {os.path.abspath(price_path)}")
except FileNotFoundError:
    ty_le_khung_data = {}
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {price_path}")

# --- Th√™m file tri th·ª©c phong th·ªßy ---
phong_thuy_path = os.path.join(os.path.dirname(__file__), "information", "phong_thuy.json")
thong_tin_chung = {}
try:
    with open(phong_thuy_path, "r", encoding="utf-8") as f:
        thong_tin_chung.update({"phong_thuy": json.load(f)})
    print(f"‚úÖ ƒê√£ n·∫°p d·ªØ li·ªáu t·ª´: {os.path.abspath(phong_thuy_path)}")
except FileNotFoundError:
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {phong_thuy_path}")

# --- Sinh ID phi√™n chat ---
session_id = str(uuid.uuid4())[:8]

# --- Ghi log chat v√†o Excel ---
def log_chat(user_input, bot_reply):
    log_dir = os.path.join(os.path.dirname(__file__), "logs")
    os.makedirs(log_dir, exist_ok=True)

    today = datetime.now().strftime("%Y-%m-%d")
    log_file = os.path.join(log_dir, f"{today}.xlsx")

    if os.path.exists(log_file):
        wb = load_workbook(log_file)
        ws = wb.active
    else:
        wb = Workbook()
        ws = wb.active
        ws.append(["ID phi√™n", "Th·ªùi gian", "Ng∆∞·ªùi d√πng", "Chatbot"])

    current_time = datetime.now().strftime("%H:%M:%S")
    ws.append([session_id, current_time, user_input, bot_reply])

    wb.save(log_file)

# --- G·ª≠i truy v·∫•n ƒë·∫øn FAISS server ---
def query_server(user_input):
    url = "http://127.0.0.1:5000/search"
    headers = {"Content-Type": "application/json"}
    data = {"query": user_input}
    try:
        response = requests.post(url, json=data, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            print("‚ùå Server tr·∫£ v·ªÅ l·ªói:", response.text)
            return None
    except requests.exceptions.ConnectionError as e:
        print("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c ƒë·∫øn Flask server:", e)
        return None

# --- Chu·∫©n h√≥a d·ªØ li·ªáu s·∫£n ph·∫©m: th√™m h√¨nh_html v√† link_html ---
def enrich_product_data(context_list):
    for item in context_list:
        if isinstance(item, dict) and "id" in item:
            sp_id = item["id"]
            img_id = sp_id.split("-")[1] if "-" in sp_id else sp_id
            item["link_ar"] = f"https://cgi.vn/ar/{img_id}"
            item["link_chi_tiet"] = f"https://cgi.vn/san-pham/{img_id}"
    return context_list

# --- Prompt b√°n h√†ng ---
system_prompt = """
B·∫°n l√† nh√¢n vi√™n b√°n tranh chuy√™n nghi·ªáp c·ªßa CGI.

Y√äU C·∫¶U:
- Khi kh√°ch h·ªèi mua tranh, ch·ªâ tr·∫£ l·ªùi ng·∫Øn g·ªçn (1-2 c√¢u), v√≠ d·ª•: 
  "D∆∞·ªõi ƒë√¢y l√† c√°c m·∫´u tranh ph√π h·ª£p v·ªõi b·∫°n:"
- Sau c√¢u m·ªü ƒë·∫ßu, li·ªát k√™ to√†n b·ªô s·∫£n ph·∫©m li√™n quan trong d·ªØ li·ªáu ƒë·∫ßu v√†o.
- M·ªói s·∫£n ph·∫©m hi·ªÉn th·ªã ƒë√∫ng 3 th√¥ng tin:
  1Ô∏è‚É£ T√™n s·∫£n ph·∫©m  
  2Ô∏è‚É£ Link AR (n·∫øu c√≥)  
  3Ô∏è‚É£ Link xem chi ti·∫øt s·∫£n ph·∫©m  

- Kh√¥ng hi·ªÉn th·ªã h√¨nh ·∫£nh, m√¥ t·∫£ phong th·ªßy, hay ƒëo·∫°n t∆∞ v·∫•n d√†i.
- M·ªói s·∫£n ph·∫©m n·∫±m tr√™n 1 kh·ªëi ri√™ng, c√≥ ƒë·ªãnh d·∫°ng r√µ r√†ng, v√≠ d·ª•:

<b>Tranh H·ªï R·ª´ng Xanh</b><br>
<a href='https://cgi.vn/ar/123' target='_blank'>Xem AR</a> | 
<a href='https://cgi.vn/san-pham/123' target='_blank'>Xem Chi Ti·∫øt</a><br><br>

- Kh√¥ng vi·∫øt th√™m c√¢u n√†o kh√°c ngo√†i danh s√°ch s·∫£n ph·∫©m.
"""


# --- G·ª≠i c√¢u h·ªèi t·ªõi OpenAI ---
def query_openai_with_context(context_list, user_input):
    context_list = enrich_product_data(context_list)
    context_text = json.dumps(context_list, ensure_ascii=False, indent=2)

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": f"Kh√°ch h·ªèi: {user_input}\n\nD·ªØ li·ªáu s·∫£n ph·∫©m:\n{context_text}"}
    ]

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.7
    )

    return response.choices[0].message.content

# --- Ch·∫°y chatbot ---
def chatbot():
    print("ü§ñ Chatbot ƒë√£ s·∫µn s√†ng! G√µ 'exit' ƒë·ªÉ tho√°t.\n")
    while True:
        user_input = input("B·∫°n: ")
        if user_input.lower() == "exit":
            print("üëã Chatbot k·∫øt th√∫c.")
            break
        faiss_results = query_server(user_input)
        if faiss_results:
            gpt_response = query_openai_with_context(faiss_results, user_input)
        else:
            gpt_response = query_openai_with_context([], user_input)
        print("Chatbot:", gpt_response)
        log_chat(user_input, gpt_response)

if __name__ == "__main__":
    chatbot()
